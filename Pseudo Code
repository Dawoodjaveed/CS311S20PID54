//we input following inputs of names of courses along with their courseCreditHours 
//and the instructors who will teach this course. And input Dailyworkinghours 
//and a list of room numbers in which theses course can teach

//length of timeslots array depends upon the dailyWorkingHours
timeslots = [
      "08:00-09:00",
      "09:00-10:00",
      "10:00-11:00",
      "11:00-12:00",
      "01:00-02:00",
    ]
days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
totalCreditHours = sum(creditHours)
totalDailyWorkingHours = dailyWorkingHours*5


COURSECREDITHOURSDECEREMENTAL(courseName, courseNamesList){
    for (m=1 to length of courseNameList) {
      if (courseNamesList[m] is equal to courseName) {
        if (parseInt(creditHoursList[m]) !== 0) {
          creditHoursList[m] = creditHoursList[m] - 1;
          break;
        }
      }
    }
  };

INITILIZE(roomslist, cNames, cInstructors){
    filter = 0;
    if (totalCreditHours <= totalDailyWorkingHours) {
      timeTable = [];
      var index = 0;
      for (var i = 0; i < creditHoursList.length; i++) {
        for (u=1 to creditHoursList[i]) {
          randomRoomNo = randomly selected roomNo from roomslist
          randomTimeSlot = randomly selected timeslot from timeslots
          randomDay = randomly selected day from days

          myclass = {
            courseName: cNames[index]),
            instructorName: cInstructors[index],
            roomNo: randomRoomNo,
            timeslot: randomTimeSlot,
            day: randomDay,
          }
	Adding myclass into timeTable list
        }

        index++;
      }
      if (checker == 0) {
        timeTableValues = all values of timeTable[0] object
	Adding timeTable[0] object into conflictsFreeTimeTable

	COURSECREDITHOURSDECEREMENTAL(timeTableValues[0], cNames);

        checker++;
        INITILIZE(roomslist, cNames, cInstructors);
      } else {
        if (confilictsFreeTimeTable.length !== totalCreditHours) {          
          for (k=1 to length timeTable) {
            timeTableValuess = values of timeTable[k] object
            for (g = 0 to length of confilictsFreeTimeTable) {
              conflictsFreeTTValues = values of confilictsFreeTimeTable[g] object
              if (conflictsFreeTTValues[3] is equal to timeTableValuess[3] and conflictsFreeTTValues[4].localeCompare(timeTableValuess[4]) {
                if (conflictsFreeTTValues[2] is not equal to timeTableValuess[2])
             	 {
                  filter++;
                }
              } else {
                filter++;
              }
            }
            if (filter is equal to length of confilictsFreeTimeTable) {
               Adding timeTable[k] to confilictsFreeTimeTabl array
              COURSECREDITHOURSDECEREMENTAL(timeTableValuess[0], cNames)
            }
            filter = 0;
          }
          INITILIZE(roomslist, cNames, cInstructors);
        }        
        for (k = 1 to length of confilictsFreeTimeTable) {
          values = values of confilictsFreeTimeTable[k] object
          Adding values[0] in coursesProps array
    	  Adding values[1] in instructorsProps array
	  Adding values[2] in roomsProps array
	  Adding values[3] in timeslotsProps array	 
	  Adding values[4] in daysProps array
	          
        }
      }
    }
    running++;
    return confilictsFreeTimeTable
  };